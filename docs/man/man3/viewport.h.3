.TH "src/include/omega_edit/viewport.h" 3 "Thu Mar 3 2022" "Version 0.8.1" "omega_edit" \" -*- nroff -*-
.ad l
.nh
.SH NAME
src/include/omega_edit/viewport.h
.SH SYNOPSIS
.br
.PP
\fC#include 'byte\&.h'\fP
.br
\fC#include 'export\&.h'\fP
.br
\fC#include 'fwd_defs\&.h'\fP
.br
\fC#include <stdint\&.h>\fP
.br

.SS "Functions"

.in +1c
.ti -1c
.RI "\fBOMEGA_EDIT_EXPORT\fP const \fBomega_session_t\fP * \fBomega_viewport_get_session\fP (const \fBomega_viewport_t\fP *viewport_ptr)"
.br
.ti -1c
.RI "\fBOMEGA_EDIT_EXPORT\fP int64_t \fBomega_viewport_get_capacity\fP (const \fBomega_viewport_t\fP *viewport_ptr)"
.br
.ti -1c
.RI "\fBOMEGA_EDIT_EXPORT\fP int64_t \fBomega_viewport_get_length\fP (const \fBomega_viewport_t\fP *viewport_ptr)"
.br
.ti -1c
.RI "\fBOMEGA_EDIT_EXPORT\fP const \fBomega_byte_t\fP * \fBomega_viewport_get_data\fP (const \fBomega_viewport_t\fP *viewport_ptr)"
.br
.ti -1c
.RI "\fBOMEGA_EDIT_EXPORT\fP int \fBomega_viewport_has_changes\fP (const \fBomega_viewport_t\fP *viewport_ptr)"
.br
.ti -1c
.RI "\fBOMEGA_EDIT_EXPORT\fP int64_t \fBomega_viewport_get_offset\fP (const \fBomega_viewport_t\fP *viewport_ptr)"
.br
.ti -1c
.RI "\fBOMEGA_EDIT_EXPORT\fP int \fBomega_viewport_is_floating\fP (const \fBomega_viewport_t\fP *viewport_ptr)"
.br
.ti -1c
.RI "\fBOMEGA_EDIT_EXPORT\fP void * \fBomega_viewport_get_user_data_ptr\fP (const \fBomega_viewport_t\fP *viewport_ptr)"
.br
.ti -1c
.RI "\fBOMEGA_EDIT_EXPORT\fP int \fBomega_viewport_update\fP (\fBomega_viewport_t\fP *viewport_ptr, int64_t offset, int64_t capacity, int is_floating)"
.br
.ti -1c
.RI "\fBOMEGA_EDIT_EXPORT\fP void \fBomega_viewport_notify\fP (const \fBomega_viewport_t\fP *viewport_ptr, \fBomega_viewport_event_t\fP viewport_event, const \fBomega_change_t\fP *change_ptr)"
.br
.in -1c
.SH "Function Documentation"
.PP 
.SS "\fBOMEGA_EDIT_EXPORT\fP int64_t omega_viewport_get_capacity (const \fBomega_viewport_t\fP * viewport_ptr)"
Given a viewport, return the viewport capacity 
.PP
\fBParameters\fP
.RS 4
\fIviewport_ptr\fP viewport to get the capacity from 
.RE
.PP
\fBReturns\fP
.RS 4
viewport capacity 
.RE
.PP

.SS "\fBOMEGA_EDIT_EXPORT\fP const \fBomega_byte_t\fP * omega_viewport_get_data (const \fBomega_viewport_t\fP * viewport_ptr)"
Given a viewport, return the viewport data 
.PP
\fBParameters\fP
.RS 4
\fIviewport_ptr\fP viewport to get the viewport data from 
.RE
.PP
\fBReturns\fP
.RS 4
viewport data 
.RE
.PP

.SS "\fBOMEGA_EDIT_EXPORT\fP int64_t omega_viewport_get_length (const \fBomega_viewport_t\fP * viewport_ptr)"
Given a viewport, return the viewport data length 
.PP
\fBParameters\fP
.RS 4
\fIviewport_ptr\fP viewport to get the viewport data length from 
.RE
.PP
\fBReturns\fP
.RS 4
viewport data length 
.RE
.PP

.SS "\fBOMEGA_EDIT_EXPORT\fP int64_t omega_viewport_get_offset (const \fBomega_viewport_t\fP * viewport_ptr)"
Given a viewport, return the viewport offset 
.PP
\fBParameters\fP
.RS 4
\fIviewport_ptr\fP viewport to get the viewport offset from 
.RE
.PP
\fBReturns\fP
.RS 4
viewport offset 
.RE
.PP

.SS "\fBOMEGA_EDIT_EXPORT\fP const \fBomega_session_t\fP * omega_viewport_get_session (const \fBomega_viewport_t\fP * viewport_ptr)"
Given a viewport, return the session pointer 
.PP
\fBParameters\fP
.RS 4
\fIviewport_ptr\fP viewport to get the session pointer from 
.RE
.PP
\fBReturns\fP
.RS 4
viewport session pointer 
.RE
.PP

.SS "\fBOMEGA_EDIT_EXPORT\fP void * omega_viewport_get_user_data_ptr (const \fBomega_viewport_t\fP * viewport_ptr)"
Given a viewport, return the viewport user data 
.PP
\fBParameters\fP
.RS 4
\fIviewport_ptr\fP viewport to get the user data from 
.RE
.PP
\fBReturns\fP
.RS 4
viewport user data 
.RE
.PP

.SS "\fBOMEGA_EDIT_EXPORT\fP int omega_viewport_has_changes (const \fBomega_viewport_t\fP * viewport_ptr)"
Given a viewport, determine if it contains changes since the last omega_viewport_get_data call 
.PP
\fBParameters\fP
.RS 4
\fIviewport_ptr\fP viewport to determine if changes are present 
.RE
.PP
\fBReturns\fP
.RS 4
0 if there are no changes present, and non-zero otherwise 
.RE
.PP

.SS "\fBOMEGA_EDIT_EXPORT\fP int omega_viewport_is_floating (const \fBomega_viewport_t\fP * viewport_ptr)"
Given a viewport, return non-zero if the viewport is floating and zero if the viewport is fixed 
.PP
\fBParameters\fP
.RS 4
\fIviewport_ptr\fP viewport to determine if its floating or not 
.RE
.PP
\fBReturns\fP
.RS 4
non-zero if the viewport is floating and zero if the viewport is fixed 
.RE
.PP

.SS "\fBOMEGA_EDIT_EXPORT\fP void omega_viewport_notify (const \fBomega_viewport_t\fP * viewport_ptr, \fBomega_viewport_event_t\fP viewport_event, const \fBomega_change_t\fP * change_ptr)"
Execute the viewport on-change callback with the given change if a viewport on-change callback is defined and if the session where this viewport lives does not currently have viewport on-change callbacks paused 
.PP
\fBParameters\fP
.RS 4
\fIviewport_ptr\fP viewport for which to execute its on-change callback 
.br
\fIchange_ptr\fP change responsible for the viewport change (if any) 
.RE
.PP

.SS "\fBOMEGA_EDIT_EXPORT\fP int omega_viewport_update (\fBomega_viewport_t\fP * viewport_ptr, int64_t offset, int64_t capacity, int is_floating)"
Change viewport settings 
.PP
\fBParameters\fP
.RS 4
\fIviewport_ptr\fP viewport to change settings on 
.br
\fIoffset\fP offset for the viewport 
.br
\fIcapacity\fP capacity of the viewport 
.br
\fIis_floating\fP 0 if the viewport is to remain fixed at the given offset, non-zero if the viewport is expected to 'float' as bytes are inserted or deleted before the start of this viewport 
.RE
.PP
\fBReturns\fP
.RS 4
0 on success, non-zero otherwise 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for omega_edit from the source code\&.
